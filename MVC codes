 public class Message
    {
        public MessageType MessageType { get; set; }
        public string MessageText { get; set; }
        public MessageDisplayType MessageDisplayType { get; set; } = MessageDisplayType.Alert;
    }

    public enum MessageType
    {
        Success = 1,
        Error = 0,
        Warning = 2,
        Info = 3
    }
    public enum MessageDisplayType
    {
        Alert = 0,
        Text = 1,

    }
	
	
	 public class HttpResponsePackage
    {
        public object data { get; set; }
        public bool status { get; set; }
        public string message { get; set; }
       
    }
	 public class ExceptionAttribute: HandleErrorAttribute
    {
        public override void OnException(ExceptionContext filterContext)
        {
            if (!filterContext.ExceptionHandled )
            {
                filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new
                {
                    action = "Sorry",
                    controller = "Error",
                })); 
                filterContext.ExceptionHandled = true;
            }
        }
    }
	public class LoggedInAttribute : ActionFilterAttribute, IActionFilter
    {
        void IActionFilter.OnActionExecuted(ActionExecutedContext filterContext)
        {
        }

        void IActionFilter.OnActionExecuting(ActionExecutingContext filterContext)
        {
            
            if (filterContext.HttpContext.Session[ApplicationConstants.UserSession] == null)
            {
                //var controllerName = filterContext.RouteData.Values["controller"];
                //var actionName = filterContext.RouteData.Values["action"];
                filterContext.Result = new RedirectToRouteResult(new RouteValueDictionary(new
                {
                    action = "Login",
                    controller = "Application",
                }));
                return;
            }
           
        }

    }
	[NonAction]
        public ApplicationSession StartSession(string userName)
        {
            var applicationSession = new ApplicationSession
            {
                Message = new Message { MessageType = MessageType.Error, MessageText = MessageConstants.InvalidRequest }
            };

            var user = _UserDataAccess.GetUserByUserName(userName);
            if (user == null)
            {
                return applicationSession;
            }

            //Create user session
            applicationSession.UserSession = new UserSession
            {
                SessionStart = DateTime.Now,
                User = user,
                SessionID = Guid.NewGuid().ToString(),

            };
            applicationSession.Message = new Message { MessageType = MessageType.Success, MessageText = $"Hello {userName}" };
            //log user session
            return applicationSession;
        }
		void login()
		{
		   var applicationSession = StartSession(model.Username);
            if (applicationSession.Message.MessageType == MessageType.Success && applicationSession.UserSession != null)
            {
                applicationSession.UserSession.DualFactorAuthenticated = true; //Remove this when MFA implemented
                Session[ApplicationConstants.UserSession] = applicationSession.UserSession;

                //Session["UserPrograms"] = Program.Parse(applicationSession.UserSession.UsersProgramsFeatures);

                /////Forwarding for dual factor authentication
                /////Checking if DFA enabled at Application level
                //if (CacheConfig.GetApplicationSettingKey("IsDualFactorEnabled") == "true" && applicationSession.UserSession.User.DualFactorEnabled)
                //{
                //    return RedirectToAction("Index", "DualFactorAuthentication");
                //}
                //else
                //{
                //    applicationSession.UserSession.DualFactorAuthenticated = true;
                //    Session["UserSession"] = applicationSession.UserSession;
                //}

                return RedirectToAction("Success");
            }
            TempData["Message"] = new Message { MessageType = MessageType.Error, MessageText = MessageConstants.InvalidUserPassword, MessageDisplayType = MessageDisplayType.Text };
            return RedirectToAction("Login");
        }
		
		public class ApplicationConstants
    {
        public const string DateFormat = "MM-dd-yyy";
        public const string UserSession = "UserSession";
        public const string SearchedSolutionsInformation = "SearchedSolutionsInformation";
        public const string SearchedSolutions = "SearchedSolutions";
        public const string TempSearchModel = "TempSearchModel";
        public const int PageSize = 100;

    }
    public class MessageConstants
    {
        public const string ErrorExceptionNotifyRetryContact = "Unable to process your request. We have been notified and are looking into issue. Please retry. If the error continue, please contact our support team.";
        public const string ErrorExceptionNotifyRetry = "Unable to process your request. We have been notified and are looking into issue. Please retry.";
        public const string ErrorException = "Unable to process your request.";
        public const string InvalidRequest = "Invaild request.";
        public const string InvalidUserPassword= "Invaild Username or Password.";
        public const string FileNotFoundException = "File does not exist.";
        public const string DataSavedSuccessfully = "Data saved successfully.";
        public const string AuthenticationFailed = "Authentication failed.";
        public const string OTPsent = "OTP sent.";
        public const string OTPResent = "OTP re-sent.";
        public const string NoResultFound = "No result found.";
        public const string InvalidConfiguration = "Invalid Configuration.";
        public const string FailUpload = "Failed to upload file.";
    }
	
	namespace CommonPortal.Filters
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)]
    public class ThrottleAttribute : ActionFilterAttribute
    {
        /// <summary>
        /// A unique name for this Throttle.
        /// </summary>
        /// <remarks>
        /// We'll be inserting a Cache record based on this name and client IP, e.g. "Name-192.168.0.1"
        /// </remarks>
        public string Name { get; set; }

        /// <summary>
        /// The number of seconds clients must wait before executing this decorated route again.
        /// </summary>
        public int Seconds { get; set; }

        /// <summary>
        /// A text message that will be sent to the client upon throttling.  You can include the token {n} to
        /// show this.Seconds in the message, e.g. "Wait {n} seconds before trying again".
        /// </summary>
        public string Message { get; set; }

        public override void OnActionExecuting(ActionExecutingContext c)
        {
            var key = string.Concat(Name, "-", c.HttpContext.Request.UserHostAddress);
            var allowExecute = false;

            if (HttpRuntime.Cache[key] == null)
            {
                HttpRuntime.Cache.Add(key,
                    true, // is this the smallest data we can have?
                    null, // no dependencies
                    DateTime.Now.AddSeconds(Seconds), // absolute expiration
                    Cache.NoSlidingExpiration,
                    CacheItemPriority.Low,
                    null); // no callback

                allowExecute = true;
            }

            if (!allowExecute)
            {
                if (String.IsNullOrEmpty(Message))
                    Message = "You may only perform this action every {n} seconds.";

                c.Result = new ContentResult { Content = Message.Replace("{n}", Seconds.ToString()) };
                // see 409 - http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html
                c.HttpContext.Response.StatusCode = (int)HttpStatusCode.Conflict;
            }
        }
    }
}

 [Throttle(Name = "SearchThrottle", Message = "You must wait {n} seconds before accessing this functionality again.", Seconds = 1)]
        public ActionResult Search(SearchModel search_model)
        {
            try
            {
return Json(new HttpResponsePackage
                    {
                        data = new
                        {
                            result = "",
                            categories = "",
                            filter = "",
                            paging = ""
                        },
                        status = true
                    });
}
            catch (Exception ex)
            {
                return Json(new HttpResponsePackage { status = false, message = MessageConstants.ErrorException });
            }

@{
    var messageModel = TempData["Message"] == null ? null : (CommonPortal.Models.Message)TempData["Message"];
    if (messageModel != null)
    {

        if (messageModel.MessageType == CommonPortal.Models.MessageType.Error && messageModel.MessageDisplayType == CommonPortal.Models.MessageDisplayType.Alert)
        {
            <div class="alert alert-danger alert-dismissible fade show text-center p-1 m-0" role="alert">
                @messageModel.MessageText
                <button type="button" class="close p-0 pr-1" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

        }

        else if (messageModel.MessageDisplayType == CommonPortal.Models.MessageDisplayType.Alert)
        {
            <div class=" alert alert-@messageModel.MessageType.ToString().ToLower() alert-dismissible fade show text-center p-1 m-0" role="alert">
                @messageModel.MessageText
                <button type="button" class="close p-0 pr-1" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

        }
        else if (messageModel.MessageType == CommonPortal.Models.MessageType.Error && messageModel.MessageDisplayType == CommonPortal.Models.MessageDisplayType.Text)
        {
            <div class="text-danger text-center p-1 m-0" role="alert">
                @messageModel.MessageText
            </div>

        }

        else
        {
            <div class=" alert alert-@messageModel.MessageType.ToString().ToLower() alert-dismissible fade show text-center p-1 m-0" role="alert">
                @messageModel.MessageText
                <button type="button" class="close p-0 pr-1" data-dismiss="alert" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            @*<div class="text-@messageModel.MessageType.ToString().ToLower()  text-center p-1 m-0 alert-dismissible fade show" role="alert">
                @messageModel.MessageText
            </div>*@

        }
    }

}
<script type="text/javascript">

    document.addEventListener("DOMContentLoaded", function (event) {
        $('[role="message"]').slideUp(4000);
    });

</script>

(function ($) {
    'use strict';
    $.fn.ShowMessage = function (type, text) {
        var html = '<div class="alert alert-' + type + ' alert-dismissible fade show text-center" style="padding: 0.2rem 0.25rem;margin-bottom: 0;border-radius: 0;">\
            <button type = "button" class="close" data-dismiss="alert" style="line-height: 0.5" >&times;</button>\
               <div class="d-flex align-items-center justify-content-center"> <i class="mdi mdi-information-variant icon-md"></i> <div>'+ text + '</div></div> </div>';
        $('[html-control="message"]').empty().html(html);
        
    }

    $.fn.Request = function (url, requestType, requestData, callbackfn) {
        $('[html-control="loader"]').show();
        $.ajax({
            type: requestType,
            url: url,
            async: true,
            data: requestData,
            dataType: 'json',
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            success: function (response) {
                $('[html-control="loader"]').hide();
                if (typeof callbackfn === "function") callbackfn(response);
            },
            complete: function () {
                $('[html-control="loader"]').hide();
            },
            error: function (response) {
                $('[html-control="loader"]').hide();
                if (response.status == 409)
                    return;
                if (response !== null && response.status === false)
                    $.fn.ShowMessage("danger", response.data.Message);
                $.fn.ShowMessage("danger", "An error on connection.");
            }
        });
    }
})(jQuery);
